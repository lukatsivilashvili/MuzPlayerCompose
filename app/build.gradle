plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
}


android {
    compileSdk 33

    defaultConfig {
        applicationId "com.example.muzplayer"
        minSdk 29
        targetSdk 33
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }

    signingConfigs {
        release {
            def tmpFilePath = System.getProperty("user.home") + "/work/_temp/keystore/"
            def allFilesFromDir = new File(tmpFilePath).listFiles()

            if (allFilesFromDir != null) {
                def keystoreFile = allFilesFromDir.first()
                keystoreFile.renameTo("keystore/upload-keystore.jks")
            }

            if (file('keystore/upload-keystore.jks').exists()) {
                def keystorePropertiesFile = rootProject.file("keystore.properties")

// Initialize a new Properties() object called keystoreProperties.
                def keystoreProperties = new Properties()

// Load your keystore.properties file into the keystoreProperties object.
                keystoreProperties.load(new FileInputStream(keystorePropertiesFile))


                storeFile file(keystoreProperties['releaseKeyStore'])
                storePassword keystoreProperties['releaseStorePassword']
                keyAlias keystoreProperties['releaseKeyAlias']
                keyPassword keystoreProperties['releaseKeyPassword']
            } else {
                storeFile = file("keystore/upload-keystore.jks")
                storePassword System.getenv("SIGNING_STORE_PASSWORD")
                keyAlias System.getenv("SIGNING_KEY_ALIAS")
                keyPassword System.getenv("SIGNING_KEY_PASSWORD")
            }

        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.3.0'
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }

    lintOptions {
        baseline file("lint-baseline.xml")
    }
}

dependencies {

    implementation 'androidx.core:core-ktx:1.9.0'
    implementation "androidx.compose.ui:ui:$compose_version"
    implementation "androidx.compose.material:material:$compose_version"
    implementation "androidx.compose.ui:ui-tooling-preview:$compose_version"
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.5.1'
    implementation 'androidx.activity:activity-compose:1.6.0'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    androidTestImplementation "androidx.compose.ui:ui-test-junit4:$compose_version"
    debugImplementation "androidx.compose.ui:ui-tooling:$compose_version"
    debugImplementation "androidx.compose.ui:ui-test-manifest:$compose_version"

    implementation "androidx.navigation:navigation-compose:2.5.2"
    implementation "androidx.compose.material:material-icons-extended:$compose_version"
    implementation("io.coil-kt:coil-compose:2.1.0")

    //Material
    // Required minimum version: 1.5.0
    implementation 'com.google.android.material:material:1.6.1'
// For use of Material3 in Compose
    implementation 'androidx.compose.material3:material3:1.0.0-rc01'

    // ExoPlayer
    api "com.google.android.exoplayer:exoplayer-core:$exoplayerVersion"
    api "com.google.android.exoplayer:exoplayer-ui:$exoplayerVersion"
    api "com.google.android.exoplayer:extension-mediasession:$exoplayerVersion"

    // Dagger - Hilt
    implementation "com.google.dagger:hilt-android:$hilt_version"
    kapt "com.google.dagger:hilt-android-compiler:$hilt_version"
    kapt "androidx.hilt:hilt-compiler:$hiltCompilerVersion"
    implementation 'androidx.hilt:hilt-navigation-compose:1.0.0'

    // Glide
    implementation 'com.github.bumptech.glide:glide:4.13.2'
    kapt 'com.github.bumptech.glide:compiler:4.13.2'

    // Coroutine Lifecycle Scopes
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycleKtxVersion"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycleKtxVersion"
    implementation "androidx.lifecycle:lifecycle-viewmodel-compose:$lifecycleViewmodelComposeVersion"

    // Coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlinxCoroutinesCoreVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$kotlinxCoroutinesAndroidVersion"

    // Lifecycle
    implementation "androidx.lifecycle:lifecycle-extensions:2.2.0"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycleKtxVersion"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycleKtxVersion"
    implementation "androidx.compose.runtime:runtime-livedata:1.3.0-rc01"
    implementation "androidx.compose.runtime:runtime:1.3.0-rc01"
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.5.1'

    // Accompanist
    implementation 'com.google.accompanist:accompanist-permissions:0.24.13-rc'
    implementation "com.google.accompanist:accompanist-systemuicontroller:0.17.0"

    implementation "androidx.preference:preference-ktx:1.2.0"
}